include "List.aes"
include "Pair.aes"

contract AdventOfCode2019Day03 =

  type wire_id = int
  type steps_record = map(wire_id, int)
  type input = list(string)
  type position = int * int
  type plan = map(position, int * steps_record)
  type result_plan = int * plan
  type wire = list(char * int)
  type tagged_wire = wire_id * wire
  type pos_check_fun = (position, steps_record) => int

  entrypoint test() : bool =
    let input1 = [[('R',75),('D',30),('R',83),('U',83),('L',12),('D',49),('R',71),('U',7),('L',72)],
                  [('U',62),('R',66),('U',55),('R',34),('D',71),('R',55),('D',58),('R',83)]]
    let input2 = [[('R',98),('U',47),('R',26),('D',63),('R',33),('U',87),('L',62),('D',20),('R',33),('U',53),('R',51)],
                  [('U',98),('R',91),('D',20),('R',16),('D',67),('R',40),('U',7),('R',15),('U',6),('R',7)]]
    let result1 = solve_1(prepare(input1))
    let result2 = solve_1(prepare(input2))
    require(159 == result1, String.concat("test 1 failed: ", Int.to_str(result1)))
    require(135 == result2, String.concat("test 2 failed: ", Int.to_str(result2)))
    //assert(610 == result(solve_2(["('R',75),('D',30),('R',83),('U',83),('L',12),('D',49),('R',71),('U',7),('L',72",
     //         "('U',62),('R',66),('U',55),('R',34),('D',71),('R',55),('D',58),('R',83)]]
    //assert(410 =
    //result(solve_2(["('R',98),('U',47),('R',26),('D',63),('R',33),('U',87),('L',62),('D',20),('R',33),('U',53),('R',51)],
     //         "('U',98),('R',91),('D',20),('R',16),('D',67),('R',40),('U',7),('R',15),('U',6),('R',7)]))
    true

  entrypoint solve_part_1() : int =
    solve_1(prepare(input()))

  entrypoint solve_part_2() : int =
    solve_2(prepare(input()))

  function result(points : list(int)) : int =
    switch(List.first(points))
      None =>
        0
      Some(n) =>
        n

  function prepare(wires : list(wire)) : list(tagged_wire) =
    List.zip(List.from_to(1, List.length(wires)), wires)

  function solve_1(wires : list(tagged_wire)) : int =
    let r_plan = run_wires(distance, wires, (0, {}))
    switch(r_plan)
      (n, _) =>
        n

  function distance(pos : position, steps : steps_record) : int =
    switch (pos)
      (x, y) =>
        abs(x) + abs(y)

  function sum_steps(pos : position, steps : steps_record) : int =
    let steps' = Map.to_list(steps)
    List.sum([Pair.snd(s) | s <- steps'])

  function check_position(acc : int, pos : position, info : (int * steps_record), fun : pos_check_fun) : int =
    switch(info)
      (n, steps) =>
        if (n > 1)
          let l = fun(pos, steps)
          if (l < acc || acc == 0) l
          else                     acc
        else
          acc

  function solve_2(wires : list(tagged_wire)) : int =
    let r_plan = run_wires(sum_steps, wires, (0, {}))
    switch(r_plan)
      (n, _) =>
        n

  function run_wires(fun : pos_check_fun, wires : list(tagged_wire), r_plan : result_plan) : result_plan =
    List.foldl((r_plan', w) =>
      switch(w)
        (wire_id, wire) =>
          run_wire(wire_id, wire, (0, 0), 0, r_plan', fun), r_plan, wires)


  function run_wire(wire_id : int, wire : wire, pos : position, steps : int, r_plan : result_plan, fun : pos_check_fun) : result_plan =
    switch(wire)
      [] =>
        r_plan
      (d, l) :: rest =>
        switch (step_wire(d, l, pos, steps, wire_id, r_plan, fun))
          (pos1, r_plan1, steps1) =>
            run_wire(wire_id, rest, pos1, steps1, r_plan1, fun)

  function step_wire(dir : char, len : int, pos : position, steps : int, wire_id : int, r_plan : result_plan, fun : pos_check_fun) : (position * result_plan * int) =
    let pos' = update_position(pos, dir, len)
    let r_plan' = List.foldl((acc, n) => step_wire'(dir, pos, steps, wire_id, acc, fun, n), r_plan, List.from_to(1, len))
    (pos', r_plan', steps+len)

  function step_wire'(dir : char, pos : position, steps : int, wire_id : int, r_plan : result_plan, fun : pos_check_fun, n : int) : result_plan =
    let pos_n = update_position(pos, dir, n)
    switch (r_plan)
      (acc, plan) =>
        switch (plan[pos_n = (0, {})])
          (count, steps_record) =>
            let entry = switch(Map.lookup(wire_id, steps_record))
              None =>
                (count+1, steps_record{[wire_id] = steps+n})
              Some(_) =>
                (count, steps_record)
            let plan' = plan{[pos_n] = entry}
            let acc' = check_position(acc, pos_n, entry, fun)
            (acc', plan')

  function update_position(pos : position, dir : char, len : int) : position =
    switch (pos)
      (pos_x, pos_y) =>
        switch(dir)
          'U' =>
            (pos_x, pos_y + len)
          'D' =>
            (pos_x, pos_y - len)
          'L' =>
            (pos_x - len, pos_y)
          'R' =>
            (pos_x + len, pos_y)

  function abs(i : int) : int =
    if (i < 0) i * (-1)
    else       i

  function input() : list(wire) =
    [[('R',1003),('U',756),('L',776),('U',308),('R',718),('D',577),('R',902),('D',776),('R',760),('U',638),('R',289),('D',70),('L',885),('U',161),('R',807),('D',842),('R',175),('D',955),('R',643),('U',380),('R',329),('U',573),('L',944),('D',2),('L',807),('D',886),('L',549),('U',592),('R',152),('D',884),('L',761),('D',915),('L',726),('D',677),('L',417),('D',651),('L',108),('D',377),('L',699),('D',938),('R',555),('D',222),('L',689),('D',196),('L',454),('U',309),('L',470),('D',234),('R',198),('U',689),('L',996),('U',117),('R',208),('D',310),('R',572),('D',562),('L',207),('U',244),('L',769),('U',186),('R',153),('D',756),('R',97),('D',625),('R',686),('U',244),('R',348),('U',586),('L',385),('D',466),('R',483),('U',718),('L',892),('D',39),('R',692),('U',756),('L',724),('U',148),('R',70),('U',224),('L',837),('D',370),('L',309),('U',235),('R',382),('D',579),('R',404),('D',146),('R',6),('U',584),('L',840),('D',863),('R',942),('U',646),('R',146),('D',618),('L',12),('U',210),('R',126),('U',163),('R',931),('D',661),('L',710),('D',883),('L',686),('D',688),('L',148),('D',19),('R',703),('U',530),('R',889),('U',186),('R',779),('D',503),('R',417),('U',272),('R',541),('U',21),('L',562),('D',10),('L',349),('U',998),('R',69),('D',65),('R',560),('D',585),('L',949),('D',372),('L',110),('D',865),('R',212),('U',56),('L',936),('U',957),('L',88),('U',612),('R',927),('U',642),('R',416),('U',348),('L',541),('D',416),('L',808),('D',759),('R',449),('D',6),('L',517),('D',4),('R',494),('D',143),('L',536),('U',341),('R',394),('U',179),('L',22),('D',680),('L',138),('U',249),('L',285),('U',879),('L',717),('U',756),('L',313),('U',222),('R',823),('D',208),('L',134),('U',984),('R',282),('U',635),('R',207),('D',63),('L',416),('U',511),('L',179),('D',582),('L',651),('U',932),('R',646),('U',378),('R',263),('U',138),('L',920),('U',523),('L',859),('D',556),('L',277),('D',518),('R',489),('U',561),('L',457),('D',297),('R',72),('U',920),('L',583),('U',23),('L',395),('D',844),('R',776),('D',552),('L',55),('D',500),('R',111),('U',409),('R',685),('D',427),('R',275),('U',739),('R',181),('U',333),('L',215),('U',808),('R',341),('D',537),('R',336),('U',230),('R',247),('U',748),('R',846),('U',404),('R',850),('D',493),('R',891),('U',176),('L',744),('U',585),('L',987),('D',849),('R',271),('D',848),('L',555),('U',801),('R',316),('U',753),('L',390),('U',97),('L',128),('U',45),('R',706),('U',35),('L',928),('U',913),('R',537),('D',512),('R',152),('D',410),('R',76),('D',209),('R',183),('U',941),('R',289),('U',632),('L',923),('D',190),('R',488),('D',934),('R',442),('D',303),('R',178),('D',250),('R',204),('U',247),('R',707),('U',77),('R',428),('D',701),('R',386),('U',110),('R',641),('U',925),('R',703),('D',387),('L',946),('U',415),('R',461),('D',123),('L',214),('U',236),('L',959),('U',517),('R',957),('D',524),('R',812),('D',668),('R',369),('U',340),('L',606),('D',503),('R',755),('U',390),('R',142),('D',921),('L',976),('D',36),('L',965),('D',450),('L',722),('D',224),('L',303),('U',705),('L',584)],
     [('L',993),('U',810),('L',931),('D',139),('R',114),('D',77),('L',75),('U',715),('R',540),('D',994),('L',866),('U',461),('R',340),('D',179),('R',314),('D',423),('R',629),('D',8),('L',692),('U',446),('L',88),('D',132),('L',128),('U',934),('L',465),('D',58),('L',696),('D',883),('L',955),('D',565),('R',424),('U',286),('R',403),('U',57),('L',627),('D',930),('R',887),('D',941),('L',306),('D',951),('R',918),('U',587),('R',939),('U',821),('L',65),('D',18),('L',987),('D',707),('L',360),('D',54),('L',932),('U',366),('R',625),('U',609),('R',173),('D',637),('R',661),('U',888),('L',68),('U',962),('R',270),('U',369),('R',780),('U',845),('L',813),('U',481),('R',66),('D',182),('R',420),('U',605),('R',880),('D',276),('L',6),('D',529),('R',883),('U',189),('R',380),('D',472),('R',30),('U',35),('L',510),('D',844),('L',146),('U',875),('R',152),('U',545),('R',274),('U',920),('R',432),('U',814),('R',583),('D',559),('L',820),('U',135),('L',353),('U',975),('L',103),('U',615),('R',401),('U',692),('L',676),('D',781),('R',551),('D',985),('L',317),('U',836),('R',115),('D',216),('L',967),('U',286),('R',681),('U',144),('L',354),('U',678),('L',893),('D',487),('R',664),('D',185),('R',787),('D',909),('L',582),('D',283),('L',519),('D',893),('L',56),('U',768),('L',345),('D',992),('L',248),('U',439),('R',573),('D',98),('L',390),('D',43),('L',470),('D',435),('R',176),('U',468),('R',688),('U',388),('L',377),('U',800),('R',187),('U',641),('L',268),('U',857),('L',716),('D',179),('R',212),('U',196),('L',342),('U',731),('R',261),('D',92),('R',183),('D',623),('L',589),('D',215),('L',966),('U',878),('L',784),('U',740),('R',823),('D',99),('L',167),('D',992),('R',414),('U',22),('L',27),('U',390),('R',286),('D',744),('L',360),('U',554),('L',756),('U',715),('R',939),('D',806),('R',279),('U',292),('L',960),('U',633),('L',428),('U',949),('R',90),('D',321),('R',749),('U',395),('L',392),('U',348),('L',33),('D',757),('R',289),('D',367),('L',562),('D',668),('L',79),('D',193),('L',991),('D',705),('L',562),('U',25),('R',146),('D',34),('R',325),('U',203),('R',403),('D',714),('R',607),('U',72),('L',444),('D',76),('R',267),('U',924),('R',289),('U',962),('L',159),('U',726),('L',57),('D',540),('R',299),('U',343),('R',936),('U',90),('L',311),('U',243),('L',415),('D',426),('L',936),('D',570),('L',539),('D',731),('R',367),('D',374),('L',56),('D',251),('L',265),('U',65),('L',14),('D',882),('L',956),('U',88),('R',688),('D',34),('R',866),('U',777),('R',342),('D',270),('L',344),('D',953),('L',438),('D',855),('L',587),('U',320),('L',953),('D',945),('L',473),('U',559),('L',487),('D',602),('R',255),('U',871),('L',854),('U',45),('R',705),('D',247),('R',955),('U',885),('R',657),('D',664),('L',360),('D',764),('L',549),('D',676),('R',85),('U',189),('L',951),('D',922),('R',511),('D',429),('R',37),('U',11),('R',821),('U',984),('R',825),('U',874),('R',753),('D',524),('L',537),('U',618),('L',919),('D',597),('L',364),('D',231),('L',258),('U',818),('R',406),('D',208),('R',214),('U',530),('R',261)]]
