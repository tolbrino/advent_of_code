include "List.aes"
include "Pair.aes"

contract AdventOfCode2019Day05 =

  entrypoint solve_part1() =
    let input' = map_input(input())
    result_1(solve(input', [1]))

  entrypoint solve_part2() =
    let input' = map_input(input())
    result_2(solve(input', [5]))

  function result_1(result) =
    switch(result)
      (_, o :: out) =>
        o

  function result_2(result) =
    switch(result)
      (_, [o]) =>
        o

  function solve(mem, in) =
    solve'(0, mem, in, [])

  function solve'(pos, mem, in, out) =
    let op = mem[pos]
    switch(parse_op(op))
      (op', c, b, a) =>
        if (op' == 99)
          (mem, out)
        else
          switch(run_op(op', pos, c, b, a, mem, in, out))
            (pos', mem', in', out') =>
              solve'(pos', mem', in', out')

  function parse_op(op) =
    let op' = op mod 100
    let c = if (op mod 1000 >= 100) 1
            else                    0
    let b = if (op mod 10000 >= 1000) 1
            else                      0
    let a = if (op >= 10000) 1
            else             0
    (op', c, b, a)

  function value(mem, pos, mode) =
    switch(mode)
      0 =>
        mem[mem[pos]]
      1 =>
        mem[pos]

  function run_op(op, pos, c, b, a, mem, in, out) =
    switch(op)
      1 =>
        let v = value(mem, pos+1, c) + value(mem, pos+2, b)
        let k = value(mem, pos+3, 1)
        (pos+4, mem{[k]=v}, in, out)
      2 =>
        let v = value(mem, pos+1, c) * value(mem, pos+2, b)
        let k = value(mem, pos+3, 1)
        (pos+4, mem{[k]=v}, in, out)
      3 =>
        let k = value(mem, pos+1, 1)
        switch(in)
          v :: in' =>
            (pos+2, mem{[k]=v}, in', out)
      4 =>
        let v = value(mem, pos+1, c)
        (pos+2, mem, in, v :: out)
      5 =>
        let v = value(mem, pos+1, c)
        if (v == 0)
          (pos+3, mem, in, out)
        else
          let pos' = value(mem, pos+2, b)
          (pos', mem, in, out)
      6 =>
        let v = value(mem, pos+1, c)
        if (v != 0)
          (pos+3, mem, in, out)
        else
          let pos' = value(mem, pos+2, b)
          (pos', mem, in, out)
      7 =>
        let cv = value(mem, pos+1, c)
        let bv = value(mem, pos+2, b)
        let k = value(mem, pos+3, 1)
        let mem' = if (cv < bv) mem{[k]=1}
                   else         mem{[k]=0}
        (pos+4, mem', in, out)
      8 =>
        let cv = value(mem, pos+1, c)
        let bv = value(mem, pos+2, b)
        let k = value(mem, pos+3, 1)
        let mem' = if (cv == bv) mem{[k]=1}
                   else          mem{[k]=0}
        (pos+4, mem', in, out)

  entrypoint test() =
    let res1 = solve(map_input([1002,4,3,4,33]), [])
    let res2 = solve(map_input([1101,100,-1,4,0]), [])
    let res3 = solve(map_input([3,9,8,9,10,9,4,9,99,-1,8]), [8])
    let res4 = solve(map_input([3,9,8,9,10,9,4,9,99,-1,8]), [7])
    let res5 = solve(map_input([3,3,1108,-1,8,3,4,3,99]), [8])
    let res6 = solve(map_input([3,3,1108,-1,8,3,4,3,99]), [7])
    let res7 = solve(map_input([3,3,1107,-1,8,3,4,3,99]), [8])
    let res8 = solve(map_input([3,3,1107,-1,8,3,4,3,99]), [7])
    let res9 = solve(map_input([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]), [0])
    let res10 = solve(map_input([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]), [2])
    let res11 = solve(map_input([3,3,1105,-1,9,1101,0,0,12,4,12,99,1]), [0])
    let res12 = solve(map_input([3,3,1105,-1,9,1101,0,0,12,4,12,99,1]), [2])
    let res13 = solve(map_input([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]), [7])
    let res14 = solve(map_input([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]), [8])
    let res15 = solve(map_input([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]), [18])
  
    require(Map.to_list(map_input([1002,4,3,4,99])) == Map.to_list(Pair.fst(res1)), "test 1 failed")
    require(Map.to_list(map_input([1101,100,-1,4,0])) == Map.to_list(Pair.fst(res2)), "test 2 failed")
    require(Pair.snd(res3) == [1], "test 3 failed")
    require(Pair.snd(res4) == [0], "test 4 failed")
    require(Pair.snd(res5) == [1], "test 5 failed")
    require(Pair.snd(res6) == [0], "test 6 failed")
    require(Pair.snd(res7) == [0], "test 7 failed")
    require(Pair.snd(res8) == [1], "test 8 failed")
    require(Pair.snd(res9) == [0], "test 9 failed")
    require(Pair.snd(res10) == [1], "test 10 failed")
    require(Pair.snd(res11) == [0], "test 11 failed")
    require(Pair.snd(res12) == [1], "test 12 failed")
    require(Pair.snd(res13) == [999], "test 12 failed")
    require(Pair.snd(res14) == [1000], "test 13 failed")
    require(Pair.snd(res15) == [1001], "test 14 failed")
    true

  function map_input(input) =
    let indices = List.from_to(0, List.length(input) - 1)
    Map.from_list(List.zip(indices, input))

  function input() : list(int) =
    [3,225,1,225,6,6,1100,1,238,225,104,0,1101,61,45,225,102,94,66,224,101,-3854,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1101,31,30,225,1102,39,44,224,1001,224,-1716,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1101,92,41,225,101,90,40,224,1001,224,-120,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,51,78,224,101,-129,224,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1,170,13,224,101,-140,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1101,14,58,225,1102,58,29,225,1102,68,70,225,1002,217,87,224,101,-783,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,19,79,225,1001,135,42,224,1001,224,-56,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,2,139,144,224,1001,224,-4060,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,1102,9,51,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,226,224,102,2,223,223,1006,224,329,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,344,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,359,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,434,101,1,223,223,1107,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,464,101,1,223,223,1108,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,7,677,677,224,1002,223,2,223,1006,224,494,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,509,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,524,101,1,223,223,8,226,677,224,1002,223,2,223,1005,224,539,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,554,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,108,226,677,224,102,2,223,223,1005,224,599,101,1,223,223,1007,226,677,224,102,2,223,223,1006,224,614,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,629,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,644,101,1,223,223,7,226,677,224,102,2,223,223,1005,224,659,1001,223,1,223,107,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226]
