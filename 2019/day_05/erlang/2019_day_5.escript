#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -sname adventofcode

-mode(compile).

%% generic

main(["--test"]) ->
  test();
main(_) ->
  Result1 = result_1(solve(map_input(input()), [1])),
  io:format(user, "Result Part 1: ~p~n", [Result1]),
  Result2 = result_2(solve(map_input(input()), [5])),
  io:format(user, "Result Part 2: ~p~n", [Result2]),
  ok.

%% specific

solve(Mem, Stdin) ->
  solve(0, Mem, Stdin, []).

solve(Pos, Mem, Stdin, Stdout) ->
  Op0 = maps:get(Pos, Mem),
  {Op1, C, B, A} = parse_op(Op0),
  case Op1 of
    99 ->
        {Mem, Stdout};
    _ ->
      {Pos1, Mem1, Stdin1, Stdout1} = op(Op1, Pos, C, B, A, Mem, Stdin, Stdout),
      solve(Pos1, Mem1, Stdin1, Stdout1)
  end.

result_1({_Mem, [V | _Out]}) ->
  V.

result_2({_Mem, [V]}) ->
  V.

op(0, _Pos, _C, _B, _A, _Mem, _In, _Out) ->
  erlang:error({"Invalid instruction 0", _Pos});
op(1, Pos, C, B, _A, Mem, In, Out) -> %% ADD
  C1 = value(Mem, Pos+1, C),
  B1 = value(Mem, Pos+2, B),
  A1 = value(Mem, Pos+3, 1),
  V = B1 + C1,
  Mem1 = maps:put(A1, V, Mem),
  {Pos + 4, Mem1, In, Out};
op(2, Pos, C, B, _A, Mem, In, Out) -> %% MUL
  C1 = value(Mem, Pos+1, C),
  B1 = value(Mem, Pos+2, B),
  A1 = value(Mem, Pos+3, 1),
  V = B1 * C1,
  Mem1 = maps:put(A1, V, Mem),
  {Pos + 4, Mem1, In, Out};
op(3, Pos, _C, _B, _A, Mem, [V | In], Out) -> %% INPUT
  C1 = value(Mem, Pos+1, 1),
  Mem1 = maps:put(C1, V, Mem),
  {Pos + 2, Mem1, In, Out};
op(4, Pos, C, _B, _A, Mem, In, Out) -> %% OUTPUT
  C1 = value(Mem, Pos+1, C),
  {Pos + 2, Mem, In, [C1 | Out]};
op(5, Pos, C, B, _A, Mem, In, Out) -> %% JUMP-IF-TRUE
  C1 = value(Mem, Pos+1, C),
  B1 = value(Mem, Pos+2, B),
  case C1 of
    0 ->
      {Pos + 3, Mem, In, Out};
    _ ->
      {B1, Mem, In, Out}
  end;
op(6, Pos, C, B, _A, Mem, In, Out) -> %% JUMP-IF-FALSE
  C1 = value(Mem, Pos+1, C),
  B1 = value(Mem, Pos+2, B),
  case C1 of
    0 ->
      {B1, Mem, In, Out};
    _ ->
      {Pos + 3, Mem, In, Out}
  end;
op(7, Pos, C, B, _A, Mem, In, Out) -> %% IS-LESS-THAN
  C1 = value(Mem, Pos+1, C),
  B1 = value(Mem, Pos+2, B),
  A1 = value(Mem, Pos+3, 1),
  case C1 < B1 of
    true ->
      Mem1 = maps:put(A1, 1, Mem),
      {Pos + 4, Mem1, In, Out};
    _ ->
      Mem1 = maps:put(A1, 0, Mem),
      {Pos + 4, Mem1, In, Out}
  end;
op(8, Pos, C, B, _A, Mem, In, Out) -> %% IS-EQUAL
  C1 = value(Mem, Pos+1, C),
  B1 = value(Mem, Pos+2, B),
  A1 = value(Mem, Pos+3, 1),
  case C1 ==  B1 of
    true ->
      Mem1 = maps:put(A1, 1, Mem),
      {Pos + 4, Mem1, In, Out};
    _ ->
      Mem1 = maps:put(A1, 0, Mem),
      {Pos + 4, Mem1, In, Out}
  end;
op(N, _Pos, _C, _B, _A, _Mem, _In, _Out) ->
  erlang:error({"Invalid instruction", N}).

value(Mem, Pos, 0) ->
  maps:get(maps:get(Pos, Mem), Mem);
value(Mem, Pos, 1) ->
  maps:get(Pos, Mem).

parse_op(Op0) ->
  Op = Op0 rem 100,
  C = if
        Op0 rem 1000 >= 100 -> 1;
        true                -> 0
      end,
  B = if
        Op0 rem 10000 >= 1000 -> 1;
        true                  -> 0
      end,
  A = if
        Op0 >= 10000 -> 1;
        true         -> 0
      end,
  {Op, C, B, A}.

test() ->
  {Res1, []} = solve(map_input([1002,4,3,4,33]), []),
  true = maps:to_list(map_input([1002,4,3,4,99])) == maps:to_list(Res1),
  {Res2, []} = solve(map_input([1101,100,-1,4,0]), []),
  true = maps:to_list(map_input([1101,100,-1,4,99])) == maps:to_list(Res2),
  {_, [1]} = solve(map_input([3,9,8,9,10,9,4,9,99,-1,8]), [8]),
  {_, [0]} = solve(map_input([3,9,8,9,10,9,4,9,99,-1,8]), [7]),
  {_, [1]} = solve(map_input([3,3,1108,-1,8,3,4,3,99]), [8]),
  {_, [0]} = solve(map_input([3,3,1108,-1,8,3,4,3,99]), [7]),
  {_, [0]} = solve(map_input([3,3,1107,-1,8,3,4,3,99]), [8]),
  {_, [1]} = solve(map_input([3,3,1107,-1,8,3,4,3,99]), [7]),
  {_, [0]} = solve(map_input([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]), [0]),
  {_, [1]} = solve(map_input([3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9]), [2]),
  {_, [0]} = solve(map_input([3,3,1105,-1,9,1101,0,0,12,4,12,99,1]), [0]),
  {_, [1]} = solve(map_input([3,3,1105,-1,9,1101,0,0,12,4,12,99,1]), [2]),
  {_, [999]} = solve(map_input([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
                               ]), [7]),
  {_, [1000]} = solve(map_input([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
                               ]), [8]),
  {_, [1001]} = solve(map_input([3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99
                               ]), [18]),
  ok.

%% problem inputs

map_input(Input) ->
  Positions = lists:seq(0, length(Input) -1),
  maps:from_list(lists:zip(Positions, Input)).

input() ->
  [3,225,1,225,6,6,1100,1,238,225,104,0,1101,61,45,225,102,94,66,224,101,-3854,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1101,31,30,225,1102,39,44,224,1001,224,-1716,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1101,92,41,225,101,90,40,224,1001,224,-120,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1101,51,78,224,101,-129,224,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,1,170,13,224,101,-140,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1101,14,58,225,1102,58,29,225,1102,68,70,225,1002,217,87,224,101,-783,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1101,19,79,225,1001,135,42,224,1001,224,-56,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,2,139,144,224,1001,224,-4060,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,1102,9,51,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,226,224,102,2,223,223,1006,224,329,101,1,223,223,108,677,677,224,102,2,223,223,1005,224,344,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,359,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,419,1001,223,1,223,8,226,226,224,102,2,223,223,1006,224,434,101,1,223,223,1107,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,464,101,1,223,223,1108,226,226,224,102,2,223,223,1006,224,479,1001,223,1,223,7,677,677,224,1002,223,2,223,1006,224,494,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,509,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,524,101,1,223,223,8,226,677,224,1002,223,2,223,1005,224,539,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,554,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,584,101,1,223,223,108,226,677,224,102,2,223,223,1005,224,599,101,1,223,223,1007,226,677,224,102,2,223,223,1006,224,614,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,629,1001,223,1,223,107,226,226,224,1002,223,2,223,1006,224,644,101,1,223,223,7,226,677,224,102,2,223,223,1005,224,659,1001,223,1,223,107,677,226,224,102,2,223,223,1005,224,674,1001,223,1,223,4,223,99,226].
